import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { API_URL } from '../../api/configApi';
import './ContractsPage.css';

const ContractsPage = () => {
  const [contracts, setContracts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedContract, setExpandedContract] = useState(null);
  
  // Get current user
  const currentUser = JSON.parse(localStorage.getItem('user'));

  const fetchUserContracts = useCallback(async () => {
    if (!currentUser?.userId) {
      setLoading(false);
      setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      // Add timeout to prevent hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      const response = await axios.get(`${API_URL}/contracts/user/${currentUser.userId}`, {
        signal: controller.signal,
        timeout: 10000
      });
      
      clearTimeout(timeoutId);
      setContracts(response.data || []);
    } catch (err) {
      if (err.code === 'ECONNABORTED' || err.name === 'AbortError') {
        setError('Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.');
      } else if (err.response?.status === 404) {
        setError('Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng n√†o cho ng∆∞·ªùi d√πng n√†y.');
      } else if (err.response?.status >= 500) {
        setError('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else if (err.code === 'ERR_NETWORK') {
        setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
      } else {
        setError(err.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ª£p ƒë·ªìng');
      }
      
      setContracts([]);
    } finally {
      setLoading(false);
    }
  }, [currentUser?.userId]);

  useEffect(() => {
    if (currentUser?.userId) {
      fetchUserContracts();
    } else {
      setLoading(false);
      setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }
  }, [currentUser?.userId]);

  const getStatusBadge = (status) => {
    const statusConfig = {
      'PENDING': { class: 'status-pending', text: 'Ch·ªù duy·ªát' },
      'PENDING_LEASE': { class: 'status-pending', text: 'Ch·ªù duy·ªát' },
      'APPROVED': { class: 'status-approved', text: 'ƒê√£ duy·ªát' },
      'REJECTED': { class: 'status-rejected', text: 'T·ª´ ch·ªëi' },
      'ACTIVE': { class: 'status-active', text: 'ƒêang ho·∫°t ƒë·ªông' },
      'COMPLETED': { class: 'status-completed', text: 'Ho√†n th√†nh' },
      'CANCELLED': { class: 'status-cancelled', text: 'ƒê√£ h·ªßy' }
    };

    const config = statusConfig[status] || { class: 'status-unknown', text: status };
    
    return (
      <span className={`status-badge ${config.class}`}>
        {config.text}
      </span>
    );
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString('vi-VN');
    } catch (error) {
      return 'N/A';
    }
  };

  const formatCurrency = (amount) => {
    if (!amount || isNaN(amount)) return '0 VND';
    try {
      return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
      }).format(amount);
    } catch (error) {
      return `${amount} VND`;
    }
  };

  const toggleContractExpansion = (contractId) => {
    setExpandedContract(expandedContract === contractId ? null : contractId);
  };

  // Show loading state
  if (loading) {
    return (
      <div className="contracts-page">
        <div className="contracts-loading">
          <div className="spinner"></div>
          <p>ƒêang t·∫£i h·ª£p ƒë·ªìng...</p>
        </div>
      </div>
    );
  }

  // Show error state
  if (error) {
    return (
      <div className="contracts-page">
        <div className="contracts-error">
          <div className="error-message">
            <i className="bi bi-exclamation-triangle"></i>
            <p>{error}</p>
            <button onClick={fetchUserContracts} className="retry-btn">
              Th·ª≠ l·∫°i
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="contracts-page">
      <div className="contracts-header">
        <h1>H·ª£p ƒë·ªìng c·ªßa t√¥i</h1>
        <p>Qu·∫£n l√Ω t·∫•t c·∫£ h·ª£p ƒë·ªìng v√† tr·∫°ng th√°i c·ªßa b·∫°n</p>
      </div>

      {!contracts || contracts.length === 0 ? (
        <div className="no-contracts">
          <div className="no-contracts-content">
            <i className="bi bi-file-earmark-text"></i>
            <h3>Ch∆∞a c√≥ h·ª£p ƒë·ªìng n√†o</h3>
            <p>B·∫°n ch∆∞a c√≥ h·ª£p ƒë·ªìng n√†o trong h·ªá th·ªëng.</p>
            <div className="no-contracts-actions">
              <button 
                className="btn-primary"
                onClick={() => window.location.href = '/rent-your-car'}
              >
                ƒêƒÉng k√Ω tr·ªü th√†nh Partner
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div className="contracts-list">
          {contracts.map((contract) => (
            <div key={contract.id || contract.contractNumber} className="contract-card">
              <div className="contract-header">
                <div className="contract-info">
                  <h3>H·ª£p ƒë·ªìng #{contract.contractNumber || 'N/A'}</h3>
                  <p className="contract-date">
                    T·∫°o ng√†y: {formatDate(contract.createdAt)}
                  </p>
                </div>
                <div className="contract-header-actions">
                  {getStatusBadge(contract.status)}
                  <button 
                    className="expand-btn"
                    onClick={() => toggleContractExpansion(contract.id)}
                  >
                    <i className={`bi ${expandedContract === contract.id ? 'bi-chevron-up' : 'bi-chevron-down'}`}></i>
                    {expandedContract === contract.id ? 'Thu g·ªçn' : 'Xem chi ti·∫øt'}
                  </button>
                </div>
              </div>

              {/* Basic Contract Info */}
              <div className="contract-details">
                <div className="detail-row">
                  <div className="detail-group">
                    <label>M√£ h·ª£p ƒë·ªìng:</label>
                    <span>{contract.contractNumber || 'N/A'}</span>
                  </div>
                  <div className="detail-group">
                    <label>Tr·∫°ng th√°i:</label>
                    {getStatusBadge(contract.status)}
                  </div>
                </div>

                <div className="detail-row">
                  <div className="detail-group">
                    <label>Ng√†y b·∫Øt ƒë·∫ßu:</label>
                    <span>{formatDate(contract.startDate)}</span>
                  </div>
                  <div className="detail-group">
                    <label>Ng√†y k·∫øt th√∫c:</label>
                    <span>{formatDate(contract.endDate)}</span>
                  </div>
                </div>

                <div className="detail-row">
                  <div className="detail-group">
                    <label>Gi√° thu√™/ng√†y:</label>
                    <span>{formatCurrency(contract.pricePerDay)}</span>
                  </div>
                  <div className="detail-group">
                    <label>Ti·ªÅn c·ªçc:</label>
                    <span>{formatCurrency(contract.deposit)}</span>
                  </div>
                </div>
              </div>

              {/* Expanded Details */}
              {expandedContract === contract.id && (
                <div className="contract-expanded-details">
                  <div className="detail-section">
                    <h4>üìã Th√¥ng tin ng∆∞·ªùi ƒëƒÉng k√Ω</h4>
                    <div className="detail-grid">
                      <div className="detail-group">
                        <label>H·ªç v√† t√™n:</label>
                        <span>{contract.name || 'N/A'}</span>
                      </div>
                      <div className="detail-group">
                        <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                        <span>{contract.phone || 'N/A'}</span>
                      </div>
                      <div className="detail-group">
                        <label>Email:</label>
                        <span>{contract.email || 'N/A'}</span>
                      </div>
                      <div className="detail-group">
                        <label>S·ªë CCCD:</label>
                        <span>{contract.cccd || 'N/A'}</span>
                      </div>
                    </div>
                  </div>

                  <div className="detail-section">
                    <h4>üöó Th√¥ng tin xe ƒëƒÉng k√Ω</h4>
                    <div className="detail-grid">
                      <div className="detail-group">
                        <label>Bi·ªÉn s·ªë xe:</label>
                        <span>{contract.carId || 'N/A'}</span>
                      </div>
                      <div className="detail-group">
                        <label>Lo·∫°i xe:</label>
                        <span>{contract.carData?.brand || 'N/A'} {contract.carData?.model || ''}</span>
                      </div>
                      <div className="detail-group">
                        <label>NƒÉm s·∫£n xu·∫•t:</label>
                        <span>{contract.carData?.year || 'N/A'}</span>
                      </div>
                      <div className="detail-group">
                        <label>M√†u xe:</label>
                        <span>{contract.carData?.color || 'N/A'}</span>
                      </div>
                      <div className="detail-group">
                        <label>S·ªë ch·ªó ng·ªìi:</label>
                        <span>{contract.carData?.seats || 'N/A'} ch·ªó</span>
                      </div>
                      <div className="detail-group">
                        <label>Nhi√™n li·ªáu:</label>
                        <span>{contract.carData?.fuelType || 'N/A'}</span>
                      </div>
                    </div>
                  </div>

                  {/* CCCD Images */}
                  <div className="detail-section">
                    <h4>üÜî ·∫¢nh CCCD</h4>
                    <div className="cccd-images">
                      {contract.cccdImages && contract.cccdImages.length > 0 ? (
                        <div className="image-grid">
                          {contract.cccdImages.map((image, index) => (
                            <div key={index} className="image-item">
                              <img 
                                src={image} 
                                alt={`CCCD ${index + 1}`}
                                onClick={() => window.open(image, '_blank')}
                              />
                              <p>CCCD {index + 1}</p>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <p className="no-images">Ch∆∞a c√≥ ·∫£nh CCCD</p>
                      )}
                    </div>
                  </div>

                  {/* Car Images */}
                  <div className="detail-section">
                    <h4>üì∏ ·∫¢nh xe</h4>
                    <div className="car-images">
                      {contract.carData?.images && contract.carData.images.length > 0 ? (
                        <div className="image-grid">
                          {contract.carData.images.map((image, index) => (
                            <div key={index} className="image-item">
                              <img 
                                src={image} 
                                alt={`·∫¢nh xe ${index + 1}`}
                                onClick={() => window.open(image, '_blank')}
                              />
                              <p>·∫¢nh xe {index + 1}</p>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <p className="no-images">Ch∆∞a c√≥ ·∫£nh xe</p>
                      )}
                    </div>
                  </div>

                  {/* Cavet Images */}
                  <div className="detail-section">
                    <h4>üìã Cavet xe</h4>
                    <div className="cavet-images">
                      {contract.carData?.cavetImages && contract.carData.cavetImages.length > 0 ? (
                        <div className="image-grid">
                          {contract.carData.cavetImages.map((image, index) => (
                            <div key={index} className="image-item">
                              <img 
                                src={image} 
                                alt={`Cavet xe ${index + 1}`}
                                onClick={() => window.open(image, '_blank')}
                              />
                              <p>Cavet xe {index + 1}</p>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <p className="no-images">Ch∆∞a c√≥ cavet xe</p>
                      )}
                    </div>
                  </div>
                </div>
              )}

              <div className="contract-actions">
                <button 
                  className="btn-secondary"
                  onClick={() => toggleContractExpansion(contract.id)}
                >
                  <i className="bi bi-eye"></i>
                  {expandedContract === contract.id ? 'Thu g·ªçn' : 'Xem chi ti·∫øt'}
                </button>
                {contract.status === 'PENDING' || contract.status === 'PENDING_LEASE' ? (
                  <button className="btn-danger">
                    <i className="bi bi-x-circle"></i>
                    H·ªßy h·ª£p ƒë·ªìng
                  </button>
                ) : null}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ContractsPage; 